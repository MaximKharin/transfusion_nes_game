;
; File generated by cc65 v 2.18 - Git 5269552
;
	.fopt		compiler,"cc65 v 2.18 - Git 5269552"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMI_flag
	.export		_Frame_Count
	.export		_index
	.export		_index4
	.export		_state
	.export		_state4
	.export		_joypad1
	.export		_joypad1old
	.export		_joypad1test
	.export		_joypad2
	.export		_joypad2old
	.export		_joypad2test
	.export		_SPRITES
	.export		_PALETTE
	.export		_All_Off
	.export		_All_On
	.export		_Reset_Scroll
	.export		_Load_Palette
	.export		_move_logic
	.export		_play_level
	.export		_show_level_and_goal
	.export		_show_text
	.export		_show_win_level
	.export		_clear_screen
	.import		_Get_Input
	.export		_left
	.export		_right
	.export		_to_move
	.export		_level_number
	.export		_max_left
	.export		_max_right
	.export		_to_win
	.export		_WIN_LEVEL_TEXT
	.export		_LEVEL_NUMBER_TEXT
	.export		_GOAL_TEXT
	.export		_LEVELS
	.export		_LEVEL_COUNT
	.export		_cycle
	.export		_status
	.export		_int_to_char
	.export		_wait_start_button
	.export		_main

.segment	"DATA"

_left:
	.byte	$00
_right:
	.byte	$00
_to_move:
	.byte	$00
_level_number:
	.byte	$00
_max_left:
	.byte	$00
_max_right:
	.byte	$00
_to_win:
	.byte	$00
_cycle:
	.byte	$00
_status:
	.byte	$00

.segment	"RODATA"

_PALETTE:
	.byte	$1F
	.byte	$00
	.byte	$10
	.byte	$20
_WIN_LEVEL_TEXT:
	.byte	$4C,$45,$56,$45,$4C,$20,$50,$41,$53,$53,$45,$44,$21,$00
_LEVEL_NUMBER_TEXT:
	.byte	$4C,$45,$56,$45,$4C,$3A,$00
_GOAL_TEXT:
	.byte	$47,$4F,$41,$4C,$3A,$00
_LEVELS:
	.byte	$01
	.byte	$05
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$07
	.byte	$05
	.byte	$06
	.byte	$03
	.byte	$07
	.byte	$04
	.byte	$02
_LEVEL_COUNT:
	.byte	$03

.segment	"BSS"

.segment	"ZEROPAGE"
_NMI_flag:
	.res	1,$00
_Frame_Count:
	.res	1,$00
_index:
	.res	1,$00
_index4:
	.res	1,$00
_state:
	.res	1,$00
_state4:
	.res	1,$00
_joypad1:
	.res	1,$00
_joypad1old:
	.res	1,$00
_joypad1test:
	.res	1,$00
_joypad2:
	.res	1,$00
_joypad2old:
	.res	1,$00
_joypad2test:
	.res	1,$00
.segment	"OAM"
_SPRITES:
	.res	256,$00

; ---------------------------------------------------------------
; void __near__ All_Off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Off: near

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0; 
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_On (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_On: near

.segment	"CODE"

;
; PPU_CTRL = 0x90; // screen is on, NMI on
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e; 
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Reset_Scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Reset_Scroll: near

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	sta     $2006
;
; SCROLL = 0;
;
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Load_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Load_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	sta     _index
L0184:	lda     _index
	cmp     #$04
	bcs     L012D
;
; PPU_DATA = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	inc     _index
	jmp     L0184
;
; }
;
L012D:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ move_logic (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_logic: near

.segment	"CODE"

;
; unsigned char move_logic (unsigned char left_volume, unsigned char right_volume) {
;
	jsr     pusha
;
; if ((joypad1 & RIGHT) != 0){
;
	lda     _joypad1
	and     #$01
	beq     L0187
;
; to_move = right_volume - right;
;
	ldx     #$00
	lda     (sp,x)
	sec
	sbc     _right
	sta     _to_move
;
; if (left > to_move){
;
	lda     _left
	sec
	sbc     _to_move
	bcc     L0185
	beq     L0185
;
; left -= to_move;
;
	lda     _to_move
	eor     #$FF
	sec
	adc     _left
	sta     _left
;
; right += to_move;
;
	lda     _to_move
	clc
	adc     _right
	sta     _right
;
; } else {
;
	jmp     L0186
;
; right += left;
;
L0185:	lda     _left
	clc
	adc     _right
	sta     _right
;
; left = 0;
;
	stx     _left
;
; return 1;
;
L0186:	lda     #$01
	jmp     incsp2
;
; if ((joypad1 & LEFT) != 0){
;
L0187:	lda     _joypad1
	and     #$02
	beq     L018A
;
; to_move = left_volume - left;
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	sec
	sbc     _left
	sta     _to_move
;
; if (right > to_move){
;
	lda     _right
	sec
	sbc     _to_move
	bcc     L0188
	beq     L0188
;
; right -= to_move;
;
	lda     _to_move
	eor     #$FF
	sec
	adc     _right
	sta     _right
;
; left += to_move;
;
	lda     _to_move
	clc
	adc     _left
	sta     _left
;
; } else {
;
	jmp     L0189
;
; left += right;
;
L0188:	lda     _right
	clc
	adc     _left
	sta     _left
;
; right = 0;
;
	stx     _right
;
; return 1;
;
L0189:	tya
	jmp     incsp2
;
; if ((joypad1 & B_BUTTON) != 0){
;
L018A:	lda     _joypad1
	and     #$40
	beq     L018C
;
; if ((joypad1 & DOWN) != 0){
;
	lda     _joypad1
	and     #$04
	beq     L018B
;
; left = left_volume;
;
	ldy     #$01
	lda     (sp),y
	sta     _left
;
; return 1;
;
	ldx     #$00
	tya
	jmp     incsp2
;
; if ((joypad1 & UP) != 0){
;
L018B:	lda     _joypad1
	and     #$08
	beq     L018C
;
; left = 0;
;
	lda     #$00
	sta     _left
;
; return 1;
;
	tax
	lda     #$01
	jmp     incsp2
;
; if ((joypad1 & A_BUTTON) != 0){
;
L018C:	lda     _joypad1
	ldx     #$00
	and     #$80
	beq     L013A
;
; if ((joypad1 & DOWN) != 0){
;
	lda     _joypad1
	and     #$04
	beq     L018D
;
; right = right_volume;
;
	lda     (sp,x)
	sta     _right
;
; return 1;
;
	lda     #$01
	jmp     incsp2
;
; if ((joypad1 & UP) != 0){
;
L018D:	lda     _joypad1
	and     #$08
	beq     L013A
;
; right = 0;
;
	stx     _right
;
; return 1;
;
	lda     #$01
	jmp     incsp2
;
; }
;
L013A:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ play_level (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_play_level: near

.segment	"CODE"

;
; unsigned char play_level(unsigned char level_number, unsigned char left_volume, unsigned char right_volume, unsigned char  goal){
;
	jsr     pusha
;
; unsigned char s = 0;
;
	lda     #$00
	jsr     pusha
;
; while (NMI_flag == 0); // wait till NMI
;
L0191:	lda     _NMI_flag
	beq     L0191
;
; Get_Input();
;
	jsr     _Get_Input
;
; s = move_logic(left_volume, right_volume);
;
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     _move_logic
	ldy     #$00
	sta     (sp),y
;
; if (s > 0){
;
	lda     (sp),y
	beq     L0193
;
; show_text(level_number, goal);
;
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     _show_text
;
; s = 0;
;
	lda     #$00
	tay
	sta     (sp),y
;
; NMI_flag = 0;
;
L0193:	sta     _NMI_flag
;
; if ((left == goal)||(right == goal)){
;
	iny
	lda     (sp),y
	cmp     _left
	beq     L0194
	cmp     _right
	beq     L0194
	ldx     #$00
	txa
	jmp     incsp5
;
; show_win_level();
;
L0194:	jsr     _show_win_level
;
; while (s == 0){
;
	jmp     L00D1
;
; s = wait_start_button();
;
L00CF:	jsr     _wait_start_button
	ldy     #$00
	sta     (sp),y
;
; while (s == 0){
;
L00D1:	ldy     #$00
	lda     (sp),y
	beq     L00CF
;
; return 1;
;
	ldx     #$00
	lda     #$01
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ show_level_and_goal (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_level_and_goal: near

.segment	"CODE"

;
; void show_level_and_goal (unsigned char level_number, unsigned char goal){
;
	jsr     pusha
;
; PPU_ADDRESS = 0x21;   // set an address in the PPU of 0x21ca
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0x01;   // left up corner
;
	lda     #$01
	sta     $2006
;
; for( index = 0; index < sizeof(LEVEL_NUMBER_TEXT); ++index ){
;
	lda     #$00
	sta     _index
L0196:	lda     _index
	cmp     #$07
	bcs     L0197
;
; PPU_DATA = LEVEL_NUMBER_TEXT[index];
;
	ldy     _index
	lda     _LEVEL_NUMBER_TEXT,y
	sta     $2007
;
; for( index = 0; index < sizeof(LEVEL_NUMBER_TEXT); ++index ){
;
	inc     _index
	jmp     L0196
;
; PPU_ADDRESS = 0x21;   // set an address in the PPU of 0x21ca
;
L0197:	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0x07;   // left up corner
;
	lda     #$07
	sta     $2006
;
; PPU_DATA = int_to_char(level_number); 
;
	ldy     #$01
	lda     (sp),y
	jsr     _int_to_char
	sta     $2007
;
; PPU_ADDRESS = 0x21;   // set an address in the PPU of 0x21ca
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0x19;   // right up corner
;
	lda     #$19
	sta     $2006
;
; for( index = 0; index < sizeof(GOAL_TEXT); ++index ){
;
	lda     #$00
	sta     _index
L0198:	lda     _index
	cmp     #$06
	bcs     L0199
;
; PPU_DATA = GOAL_TEXT[index];
;
	ldy     _index
	lda     _GOAL_TEXT,y
	sta     $2007
;
; for( index = 0; index < sizeof(GOAL_TEXT); ++index ){
;
	inc     _index
	jmp     L0198
;
; PPU_ADDRESS = 0x21;   // set an address in the PPU of 0x21ca
;
L0199:	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0x1e;   // right up corner
;
	lda     #$1E
	sta     $2006
;
; PPU_DATA = int_to_char(goal); 
;
	ldy     #$00
	lda     (sp),y
	jsr     _int_to_char
	sta     $2007
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ show_text (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_text: near

.segment	"CODE"

;
; void show_text(unsigned char level_number, unsigned char goal) {
;
	jsr     pusha
;
; All_Off();
;
	jsr     _All_Off
;
; Load_Palette();
;
	jsr     _Load_Palette
;
; PPU_ADDRESS = 0x21;   // set an address in the PPU of 0x21ca
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0x6b;   // about the middle of the screen
;
	lda     #$6B
	sta     $2006
;
; PPU_DATA = int_to_char(left);
;
	lda     _left
	jsr     _int_to_char
	sta     $2007
;
; PPU_ADDRESS = 0x21;   // set an address in the PPU of 0x21ca
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0x73;   // about the middle of the screen
;
	lda     #$73
	sta     $2006
;
; PPU_DATA = int_to_char(right); 
;
	lda     _right
	jsr     _int_to_char
	sta     $2007
;
; if (level_number > 0) {
;
	ldy     #$01
	lda     (sp),y
	beq     L003B
;
; show_level_and_goal(level_number, goal);
;
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _show_level_and_goal
;
; Reset_Scroll();
;
L003B:	jsr     _Reset_Scroll
;
; All_On();
;
	jsr     _All_On
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ show_win_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_win_level: near

.segment	"CODE"

;
; All_Off();
;
	jsr     _All_Off
;
; Load_Palette();
;
	jsr     _Load_Palette
;
; PPU_ADDRESS = 0x21;   // set an address in the PPU of 0x21ca
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xc9;   // about the middle of the screen
;
	lda     #$C9
	sta     $2006
;
; for( index = 0; index < sizeof(WIN_LEVEL_TEXT); ++index ){
;
	lda     #$00
	sta     _index
L019A:	lda     _index
	cmp     #$0E
	bcs     L0089
;
; PPU_DATA = WIN_LEVEL_TEXT[index];
;
	ldy     _index
	lda     _WIN_LEVEL_TEXT,y
	sta     $2007
;
; for( index = 0; index < sizeof(WIN_LEVEL_TEXT); ++index ){
;
	inc     _index
	jmp     L019A
;
; Reset_Scroll();
;
L0089:	jsr     _Reset_Scroll
;
; All_On();
;
	jmp     _All_On

.endproc

; ---------------------------------------------------------------
; void __near__ clear_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_screen: near

.segment	"CODE"

;
; All_Off();
;
	jsr     _All_Off
;
; PPU_ADDRESS = 0x21;   // set an address in the PPU of 0x21ca
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0x00;   // about the middle of the screen
;
	lda     #$00
	sta     $2006
;
; for( index = 0; index < 255; ++index ){
;
	sta     _index
L019B:	lda     _index
	cmp     #$FF
	bcs     L00A1
;
; PPU_DATA = 0;
;
	lda     #$00
	sta     $2007
;
; for( index = 0; index < 255; ++index ){
;
	inc     _index
	jmp     L019B
;
; Reset_Scroll();
;
L00A1:	jsr     _Reset_Scroll
;
; All_On();
;
	jmp     _All_On

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ int_to_char (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_int_to_char: near

.segment	"CODE"

;
; char int_to_char(char i) {
;
	jsr     pusha
;
; return i + '0';
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	ldx     #$00
;
; } 
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ wait_start_button (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_wait_start_button: near

.segment	"CODE"

;
; Get_Input();
;
	jsr     _Get_Input
;
; if ((joypad1 & START)!= 0){
;
	lda     _joypad1
	ldx     #$00
	and     #$10
	beq     L019D
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L019D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; show_text(0, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _show_text
;
; for (cycle = 0; cycle < LEVEL_COUNT; cycle++) {
;
	lda     #$00
	sta     _cycle
	tax
L019E:	lda     _cycle
	cmp     _LEVEL_COUNT
	bcc     L019F
;
; }
;
	rts
;
; left = 0;
;
L019F:	txa
	sta     _left
;
; right = 0;
;
	sta     _right
;
; level_number = LEVELS[cycle*4+0];
;
	lda     _cycle
	jsr     shlax2
	sta     ptr1
	txa
	clc
	adc     #>(_LEVELS)
	sta     ptr1+1
	ldy     #<(_LEVELS)
	lda     (ptr1),y
	sta     _level_number
;
; max_left = LEVELS[cycle*4+1];
;
	ldx     #$00
	lda     _cycle
	jsr     shlax2
	clc
	adc     #$01
	bcc     L00F1
	inx
L00F1:	sta     ptr1
	txa
	clc
	adc     #>(_LEVELS)
	sta     ptr1+1
	ldy     #<(_LEVELS)
	lda     (ptr1),y
	sta     _max_left
;
; max_right = LEVELS[cycle*4+2];
;
	ldx     #$00
	lda     _cycle
	jsr     shlax2
	clc
	adc     #$02
	bcc     L00F5
	inx
L00F5:	sta     ptr1
	txa
	clc
	adc     #>(_LEVELS)
	sta     ptr1+1
	ldy     #<(_LEVELS)
	lda     (ptr1),y
	sta     _max_right
;
; to_win = LEVELS[cycle*4+3];
;
	ldx     #$00
	lda     _cycle
	jsr     shlax2
	clc
	adc     #$03
	bcc     L00F9
	inx
L00F9:	sta     ptr1
	txa
	clc
	adc     #>(_LEVELS)
	sta     ptr1+1
	ldy     #<(_LEVELS)
	lda     (ptr1),y
	sta     _to_win
;
; status = 0;
;
	lda     #$00
	sta     _status
;
; show_text(level_number, to_win);
;
	lda     _level_number
	jsr     pusha
	lda     _to_win
	jsr     _show_text
;
; while (status == 0){
;
	jmp     L0101
;
; status = play_level(level_number, max_left, max_right, to_win);
;
L00FF:	jsr     decsp3
	lda     _level_number
	ldy     #$02
	sta     (sp),y
	lda     _max_left
	dey
	sta     (sp),y
	lda     _max_right
	dey
	sta     (sp),y
	lda     _to_win
	jsr     _play_level
	sta     _status
;
; while (status == 0){
;
L0101:	lda     _status
	beq     L00FF
;
; clear_screen();
;
	jsr     _clear_screen
;
; for (cycle = 0; cycle < LEVEL_COUNT; cycle++) {
;
	ldx     #$00
	inc     _cycle
	jmp     L019E

.endproc

