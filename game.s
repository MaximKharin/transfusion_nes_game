;
; File generated by cc65 v 2.18 - Git 5269552
;
	.fopt		compiler,"cc65 v 2.18 - Git 5269552"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_NMI_flag
	.export		_Frame_Count
	.export		_index
	.export		_index4
	.export		_state
	.export		_state4
	.export		_joypad1
	.export		_joypad1old
	.export		_joypad1test
	.export		_joypad2
	.export		_joypad2old
	.export		_joypad2test
	.export		_SPRITES
	.export		_PALETTE
	.export		_All_Off
	.export		_All_On
	.export		_Reset_Scroll
	.export		_Load_Palette
	.export		_move_logic
	.export		_play_level
	.import		_Get_Input
	.export		_left
	.export		_right
	.export		_to_move
	.export		_MAX_LEFT
	.export		_MAX_RIGHT
	.export		_TO_WIN
	.export		_LEVEL_NUMBER
	.export		_WIN_LEVEL_TEXT
	.export		_int_to_char
	.export		_show_text
	.export		_show_win_level
	.export		_main

.segment	"DATA"

_left:
	.byte	$00
_right:
	.byte	$00
_to_move:
	.byte	$00

.segment	"RODATA"

_PALETTE:
	.byte	$1F
	.byte	$00
	.byte	$10
	.byte	$20
_MAX_LEFT:
	.byte	$05
_MAX_RIGHT:
	.byte	$03
_TO_WIN:
	.byte	$04
_LEVEL_NUMBER:
	.byte	$01
_WIN_LEVEL_TEXT:
	.byte	$4C,$45,$56,$45,$4C,$20,$50,$41,$53,$53,$45,$44,$21,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_NMI_flag:
	.res	1,$00
_Frame_Count:
	.res	1,$00
_index:
	.res	1,$00
_index4:
	.res	1,$00
_state:
	.res	1,$00
_state4:
	.res	1,$00
_joypad1:
	.res	1,$00
_joypad1old:
	.res	1,$00
_joypad1test:
	.res	1,$00
_joypad2:
	.res	1,$00
_joypad2old:
	.res	1,$00
_joypad2test:
	.res	1,$00
.segment	"OAM"
_SPRITES:
	.res	256,$00

; ---------------------------------------------------------------
; void __near__ All_Off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Off: near

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0; 
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_On (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_On: near

.segment	"CODE"

;
; PPU_CTRL = 0x90; // screen is on, NMI on
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e; 
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Reset_Scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Reset_Scroll: near

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	sta     $2006
;
; SCROLL = 0;
;
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Load_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Load_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	sta     _index
L00D5:	lda     _index
	cmp     #$04
	bcs     L0085
;
; PPU_DATA = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	inc     _index
	jmp     L00D5
;
; }
;
L0085:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_logic (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_logic: near

.segment	"CODE"

;
; void move_logic (unsigned char left_volume, unsigned char right_volume) {
;
	jsr     pusha
;
; if ((joypad1 & RIGHT) != 0){
;
	lda     _joypad1
	and     #$01
	beq     L00D7
;
; to_move = right_volume - right;
;
	ldy     #$00
	lda     (sp),y
	sec
	sbc     _right
	sta     _to_move
;
; if (left > to_move){
;
	lda     _left
	sec
	sbc     _to_move
	bcc     L00D6
	beq     L00D6
;
; left -= to_move;
;
	lda     _to_move
	eor     #$FF
	sec
	adc     _left
	sta     _left
;
; right += to_move;
;
	lda     _to_move
	clc
	adc     _right
	sta     _right
;
; } else {
;
	jmp     L00D7
;
; right += left;
;
L00D6:	lda     _left
	clc
	adc     _right
	sta     _right
;
; left = 0;
;
	sty     _left
;
; if ((joypad1 & LEFT) != 0){
;
L00D7:	lda     _joypad1
	and     #$02
	beq     L00D9
;
; to_move = left_volume - left;
;
	ldy     #$01
	lda     (sp),y
	sec
	sbc     _left
	sta     _to_move
;
; if (right > to_move){
;
	lda     _right
	sec
	sbc     _to_move
	bcc     L00D8
	beq     L00D8
;
; right -= to_move;
;
	lda     _to_move
	eor     #$FF
	sec
	adc     _right
	sta     _right
;
; left += to_move;
;
	lda     _to_move
	clc
	adc     _left
	sta     _left
;
; } else {
;
	jmp     L00D9
;
; left += right;
;
L00D8:	lda     _right
	clc
	adc     _left
	sta     _left
;
; right = 0;
;
	lda     #$00
	sta     _right
;
; if ((joypad1 & B_BUTTON) != 0){
;
L00D9:	lda     _joypad1
	and     #$40
	beq     L00DB
;
; if ((joypad1 & DOWN) != 0){
;
	lda     _joypad1
	and     #$04
	beq     L00DA
;
; left = left_volume;
;
	ldy     #$01
	lda     (sp),y
	sta     _left
;
; if ((joypad1 & UP) != 0){
;
L00DA:	lda     _joypad1
	and     #$08
	beq     L00DB
;
; left = 0;
;
	lda     #$00
	sta     _left
;
; if ((joypad1 & A_BUTTON) != 0){
;
L00DB:	lda     _joypad1
	and     #$80
	beq     L00CF
;
; if ((joypad1 & DOWN) != 0){
;
	lda     _joypad1
	and     #$04
	beq     L00DC
;
; right = right_volume;
;
	ldy     #$00
	lda     (sp),y
	sta     _right
;
; if ((joypad1 & UP) != 0){
;
L00DC:	lda     _joypad1
	and     #$08
	beq     L00CF
;
; right = 0;
;
	lda     #$00
	sta     _right
;
; }
;
L00CF:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ play_level (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_play_level: near

.segment	"CODE"

;
; void play_level(unsigned char level_number, unsigned char left_volume, unsigned char right_volume, unsigned char  goal){
;
	jsr     pusha
;
; Get_Input();
;
	jsr     _Get_Input
;
; move_logic(left_volume, right_volume);
;
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     _move_logic
;
; show_text();
;
	jsr     _show_text
;
; if ((left == goal)||(right == goal)){
;
	ldy     #$00
	lda     (sp),y
	cmp     _left
	beq     L00DF
	cmp     _right
	jne     incsp4
;
; show_win_level();
;
L00DF:	jsr     _show_win_level
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ int_to_char (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_int_to_char: near

.segment	"CODE"

;
; char int_to_char(char i) {
;
	jsr     pusha
;
; return i + '0';
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$30
	ldx     #$00
;
; } 
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ show_text (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_text: near

.segment	"CODE"

;
; All_Off();
;
	jsr     _All_Off
;
; Load_Palette();
;
	jsr     _Load_Palette
;
; PPU_ADDRESS = 0x21;   // set an address in the PPU of 0x21ca
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0x4b;   // about the middle of the screen
;
	lda     #$4B
	sta     $2006
;
; PPU_DATA = int_to_char(left);
;
	lda     _left
	jsr     _int_to_char
	sta     $2007
;
; PPU_ADDRESS = 0x21;   // set an address in the PPU of 0x21ca
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0x53;   // about the middle of the screen
;
	lda     #$53
	sta     $2006
;
; PPU_DATA = int_to_char(right); 
;
	lda     _right
	jsr     _int_to_char
	sta     $2007
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; All_On();
;
	jmp     _All_On

.endproc

; ---------------------------------------------------------------
; void __near__ show_win_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_win_level: near

.segment	"CODE"

;
; All_Off();
;
	jsr     _All_Off
;
; Load_Palette();
;
	jsr     _Load_Palette
;
; PPU_ADDRESS = 0x21;   // set an address in the PPU of 0x21ca
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xc9;   // about the middle of the screen
;
	lda     #$C9
	sta     $2006
;
; for( index = 0; index < sizeof(WIN_LEVEL_TEXT); ++index ){
;
	lda     #$00
	sta     _index
L00E0:	lda     _index
	cmp     #$0E
	bcs     L0036
;
; PPU_DATA = WIN_LEVEL_TEXT[index];
;
	ldy     _index
	lda     _WIN_LEVEL_TEXT,y
	sta     $2007
;
; for( index = 0; index < sizeof(WIN_LEVEL_TEXT); ++index ){
;
	inc     _index
	jmp     L00E0
;
; Reset_Scroll();
;
L0036:	jsr     _Reset_Scroll
;
; All_On();
;
	jmp     _All_On

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; show_text();
;
	jsr     _show_text
;
; while (NMI_flag == 0); // wait till NMI
;
L00E1:	lda     _NMI_flag
	beq     L00E1
;
; play_level(LEVEL_NUMBER, MAX_LEFT, MAX_RIGHT, TO_WIN);
;
	jsr     decsp3
	lda     _LEVEL_NUMBER
	ldy     #$02
	sta     (sp),y
	lda     _MAX_LEFT
	dey
	sta     (sp),y
	lda     _MAX_RIGHT
	dey
	sta     (sp),y
	lda     _TO_WIN
	jsr     _play_level
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; while (1){   // infinite loop
;
	jmp     L00E1

.endproc

